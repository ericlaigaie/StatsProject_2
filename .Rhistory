print(paste('Test  - ? Native Country:', nrow(df_test %>% filter(native_country == '?')), sep=' '))
# Let's make a version 2 of train and test that has no ?'s
df_train2 <- df_train %>% filter(workclass != '?')
df_train2 <- df_train2 %>% filter(occupation != '?')
df_train2 <- df_train2 %>% filter(native_country != '?')
df_test2 <- df_test %>% filter(workclass != '?')
df_test2 <- df_test2 %>% filter(occupation != '?')
df_test2 <- df_test2 %>% filter(native_country != '?')
#Created 2 new dataframes: df_train2 and df_test2
df_train2 <- as.data.frame(unclass(df_train2), stringsAsFactors = TRUE)
df_test2 <- as.data.frame(unclass(df_test2), stringsAsFactors = TRUE)
#Rayon getting familiar with the data. Will remove from final project.
#str(df_train2)
# ? and Never-worked was removed in df_train2 and df_test2
# length(unique(df_train$workclass))
# length(unique(df_train2$workclass))
# unique(df_train$workclass)
# unique(df_train2$workclass)
#Another way to analyze the data.
# install.packages("psych")
# library(psych)
# view(describe(df_train2))
# Count of <=50K and >50K
# sum(with(df_train2,pay_response == "<=50K")) # 22654
# sum(with(df_train2,pay_response == ">50K")) #7508
#
# sum(with(df_test2,pay_response == "<=50K.")) #11360
# sum(with(df_test2,pay_response == ">50K.")) #3700
#
# str(df_test2)
# Let's try and see if we can collapse some levels of the education factor
# First, look at train ----------------------------------------------------------------------------------------------------
# Establish factor order
edu_levels <- c('Preschool','1st-4th','5th-6th','7th-8th','9th','10th','11th','12th','HS-grad','Some-college','Assoc-voc','Assoc-acdm','Bachelors','Masters','Prof-school','Doctorate')
df_train2 <- df_train2 %>%
mutate(education = fct_relevel(education, edu_levels))
# Plot pay_response proportion by level
ggplot(df_train2, aes(y=education, fill=pay_response)) + geom_bar(position='fill') + labs(x='pay_response proportion', title='Pay_response Proportions by Education - Train')
# New levels of factors (any unlisted here are staying single)
grades <- c('1st-4th','5th-6th','7th-8th','9th','10th','11th','12th')
grads <- c('HS-grad','Some-college')
assocs <- c('Assoc-voc','Assoc-acdm')
docs <- c('Prof-school','Doctorate')
# Mutate education factor into new levels
df_train2 <- df_train2 %>% mutate(
education = case_when(
education == 'Preschool' ~ 'Preschool',
education %in% grades ~ 'Grade School',
education %in% grads ~ 'HS Grads',
education %in% assocs ~ 'Assocs',
education == 'Bachelors' ~ 'Bachelors',
education == 'Masters' ~ 'Masters',
education %in% docs ~ 'Docs/Profs'
)
)
# Establish new factor order
edu_levels <- c('Preschool', 'Grade School', 'HS Grads', 'Assocs', 'Bachelors', 'Masters', 'Docs/Profs')
df_train2 <- df_train2 %>% mutate(education = factor(education), education = fct_relevel(education, edu_levels))
# Plot final levels
ggplot(df_train2, aes(y=education, fill=pay_response)) + geom_bar(position='fill') + labs(x='pay_response proportion', title='Pay_response Proportions by Education - Train')
# Repeat process with test ----------------------------------------------------------------------------------------------
edu_levels <- c('Preschool','1st-4th','5th-6th','7th-8th','9th','10th','11th','12th','HS-grad','Some-college','Assoc-voc','Assoc-acdm','Bachelors','Masters','Prof-school','Doctorate')
df_test2 <- df_test2 %>%
mutate(education = fct_relevel(education, edu_levels))
# Plot pay_response proportion by level
ggplot(df_test2, aes(y=education, fill=pay_response)) + geom_bar(position='fill') + labs(x='pay_response proportion', title='Pay_response Proportions by Education - Test')
# While the distributions here are slightly different, let's keep the same groups
grades <- c('1st-4th','5th-6th','7th-8th','9th','10th','11th','12th')
grads <- c('HS-grad','Some-college')
assocs <- c('Assoc-voc','Assoc-acdm')
docs <- c('Prof-school','Doctorate')
# Mutate education factor into new levels
df_test2 <- df_test2 %>% mutate(
education = case_when(
education == 'Preschool' ~ 'Preschool',
education %in% grades ~ 'Grade School',
education %in% grads ~ 'HS Grads',
education %in% assocs ~ 'Assocs',
education == 'Bachelors' ~ 'Bachelors',
education == 'Masters' ~ 'Masters',
education %in% docs ~ 'Docs/Profs'
)
)
# Establish new factor order
edu_levels <- c('Preschool', 'Grade School', 'HS Grads', 'Assocs', 'Bachelors', 'Masters', 'Docs/Profs')
df_test2 <- df_test2 %>% mutate(education = factor(education), education = fct_relevel(education, edu_levels))
# Plot final levels
ggplot(df_test2, aes(y=education, fill=pay_response)) + geom_bar(position='fill') + labs(x='pay_response proportion', title='Pay_response Proportions by Education - Test')
#Response variable (>50K) increases as the level of school increases!
ggarrange(
ggplot(df_train2, aes(y=workclass, fill=pay_response)) + geom_bar(position='fill') + labs(x='pay_response proportion', title='Pay_response Proportions by Workclass - Train') + theme(legend.position='none'),
ggplot(df_test2, aes(y=workclass, fill=pay_response)) + geom_bar(position='fill') + labs(x='pay_response proportion', title='Pay_response Proportions by Workclass - Test') + theme(legend.position='none'),
nrow=1)
# There aren't too many levels here, and I can't find any pair I would really like to collapse together.
#Rayon - I agree with this. no clear way of collapsing it.All Workclass included our variable of interest. Exception is Without Pay in Training
ggarrange(
ggplot(df_train2, aes(y=occupation, fill=pay_response)) + geom_bar(position='fill') + labs(x='pay_response proportion', title='Pay_response Proportions by occupation - Train') + theme(legend.position='none'),
ggplot(df_test2, aes(y=occupation, fill=pay_response)) + geom_bar(position='fill') + labs(x='pay_response proportion', title='Pay_response Proportions by occupation - Test') + theme(legend.position='none'),
nrow=1)
# While there are a lot of levels here, I don't see any groups that would make sense to collapse together.
ggarrange(
ggplot(df_train2, aes(y=marital_status, fill=pay_response)) + geom_bar(position='fill') + labs(x='pay_response proportion', title='Pay_response Proportions by marital_status - Train') + theme(legend.position='none'),
ggplot(df_test2, aes(y=marital_status, fill=pay_response)) + geom_bar(position='fill') + labs(x='pay_response proportion', title='Pay_response Proportions by marital_status - Test') + theme(legend.position='none'),
nrow=1)
# There's not a ton of levels and I don't see any groups that would make sense to collapse together.
# Rayon I agree
# First, let's look at train ---------------------------------------------------------------------------------------------
ggplot(df_train2, aes(y=native_country, fill=pay_response)) + geom_bar(position='fill') + labs(x='pay_response proportion', title='Pay_response Proportions by native_country - Train')
# There are way too many levels here to keep. The most logical way to collapse these would be by continent
# Grouping by asia, europe, north america, and latin america, we are left with Outlying-US territories and 'South' -- this could be South Africa or South Korea...it is also weird that there are no African countries.
asia <- c('Cambodia','China','Hong','India','Iran','Japan','Laos','Philippines','Taiwan','Thailand','Vietnam')
europe <- c('England','France','Germany','Greece','Holand-Netherlands','Hungary','Ireland','Italy','Poland','Portugal','Scotland','Yugoslavia')
namerica <- c('Canada','United-States')
lamerica <- c('Cuba','Dominican-Republic','El-Salvador','Guatemala','Haiti','Honduras','Jamaica','Mexico','Nicaragua','Puerto-Rico','Trinadad&Tobago','Columbia','Ecuador','Peru')
islands <- c('Outlying-US(Guam-USVI-etc)')
df_train2 <- df_train2 %>% mutate(
native_country = case_when(
native_country %in% asia ~ 'Asia',
native_country %in% europe ~ 'Europe',
native_country %in% namerica ~ 'North America',
native_country %in% lamerica ~ 'Latin America',
native_country %in% islands ~ 'US Territories',
TRUE ~ 'South'
)
)
ggplot(df_train2, aes(y=native_country, fill=pay_response)) + geom_bar(position='fill') + labs(x='pay_response proportion', title='Pay_response Proportions by native_country - Train')
# Next, let's look at test -----------------------------------------------------------------------------------------------
ggplot(df_test2, aes(y=native_country, fill=pay_response)) + geom_bar(position='fill') + labs(x='pay_response proportion', title='Pay_response Proportions by native_country - test')
# There are way too many levels here to keep. The most logical way to collapse these would be by continent
# Grouping by asia, europe, north america, and latin america, we are left with Outlying-US territories and 'South' -- this could be South Africa or South Korea...it is also weird that there are no African countries.
asia <- c('Cambodia','China','Hong','India','Iran','Japan','Laos','Philippines','Taiwan','Thailand','Vietnam')
europe <- c('England','France','Germany','Greece','Holand-Netherlands','Hungary','Ireland','Italy','Poland','Portugal','Scotland','Yugoslavia')
namerica <- c('Canada','United-States')
lamerica <- c('Cuba','Dominican-Republic','El-Salvador','Guatemala','Haiti','Honduras','Jamaica','Mexico','Nicaragua','Puerto-Rico','Trinadad&Tobago','Columbia','Ecuador','Peru')
islands <- c('Outlying-US(Guam-USVI-etc)')
df_test2 <- df_test2 %>% mutate(
native_country = case_when(
native_country %in% asia ~ 'Asia',
native_country %in% europe ~ 'Europe',
native_country %in% namerica ~ 'North America',
native_country %in% lamerica ~ 'Latin America',
native_country %in% islands ~ 'US Territories',
TRUE ~ 'South'
)
)
ggplot(df_test2, aes(y=native_country, fill=pay_response)) + geom_bar(position='fill') + labs(x='pay_response proportion', title='Pay_response Proportions by native_country - test')
# We found that no person has nonzero gain and loss (figured as much), so how can we calculate cap_net?
df_train2 %>% filter(capital_gain != 0 & capital_loss != 0)
df_test2 %>% filter(capital_gain != 0 & capital_loss != 0)
# Since we know that cap_gain and cap_loss cannot exist together, simply calculating cap_gain - cap_loss would give us what we want...two possible cases:
#   Capital_gain exists: Capital_net = X - 0
#   Capital_loss exists: Capital_net = 0 - X
df_train2$capital_net = df_train2$capital_gain - df_train2$capital_loss
df_test2$capital_net = df_test2$capital_gain - df_test2$capital_loss
df_train2 <- dplyr::select(df_train2,-c(capital_gain, capital_loss))
df_test2 <- dplyr::select(df_test2,-c(capital_gain, capital_loss))
# Let's check for multicollinearity
ggplot(df_train2, aes(y=education, x=education_num)) + geom_boxplot(fill='indianred2') + labs(title='Education_num distribution by Education - Train')
ggplot(df_test2, aes(y=education, x=education_num)) + geom_boxplot(fill='indianred2') + labs(title='Education_num distribution by Education - Test')
# Here, you can see that these two variables are directly related, as expected...so we can only include one. Since education is best viewed through factors (there isn't a numerical relationship between education levels), we'll keep education.
df_train2 <- dplyr::select(df_train2,-c(education_num))
df_test2 <- dplyr::select(df_test2,-c(education_num))
ggpairs(df_train2, columns = c(2,4,11,14), ggplot2::aes(colour=pay_response))
ggpairs(df_test2, columns = c(2,4,11,14), ggplot2::aes(colour=pay_response))
# Just realized the pay_response variable is stored as '<=50K.' and '>50K.'. Let's get rid of those periods
df_test2 <- df_test2 %>% mutate(pay_response = ifelse(pay_response == '<=50K.', '<=50K', '>50K'))
print(paste('Percentage of positive responses in Train: ',
round((nrow(df_train2 %>% filter(pay_response == '>50K')) / nrow(df_train2)) * 100,2),
'%', sep=''))
print(paste('Percentage of positive responses in Test: ',
round((nrow(df_test2 %>% filter(pay_response == '>50K')) / nrow(df_test2)) * 100,2),
'%', sep=''))
# Create the model with selection
full.log<-glm(pay_response~.,family="binomial",data=df_train2)
step.log<-full.log %>% stepAIC(trace=FALSE)
# Summary of model
summary(step.log)
# Odds ratios of model
exp(cbind("Odds ratio" = coef(step.log), confint.default(step.log, level = 0.95)))
# Make predictions on model
fit.pred.step<-predict(step.log,newdata=df_test2,type="response")
# Set cutoff and make classifications from predictions
cutoff<- 0.5
class.step<-factor(ifelse(fit.pred.step>cutoff,">50K","<=50K"),levels=c("<=50K",">50K"))
# Print confusion matrix
conf.step<-table(class.step,df_test2$pay_response)
conf.step
confusionMatrix(conf.step)
confusionMatrix(conf.step)
cm.step <- confusionMatrix(conf.step)
cm.step$overall
cm.step$overall[1]
cutoffs <- seq(.1,.9,.05)
accuracies <- c()
for (i in cutoffs) {
print(i)
curr.class.step <- factor(ifelse(fit.pred.step>i,">50K","<=50K"),levels=c("<=50K",">50K"))
curr.conf.step <- table(curr.class.step,df_test2$pay_response)
curr.cm.step <- confusionMatrix(curr.conf.step)
accuracies <- append(accuracies, curr.cm.step$overall[1])
}
cutoff_acc_loop <- data.frame('cutoffs' = cutoffs, 'accuracies' = accuracies)
cutoff_acc_loop
cutoffs <- seq(.1,.9,.01)
accuracies <- c()
for (i in cutoffs) {
print(i)
curr.class.step <- factor(ifelse(fit.pred.step>i,">50K","<=50K"),levels=c("<=50K",">50K"))
curr.conf.step <- table(curr.class.step,df_test2$pay_response)
curr.cm.step <- confusionMatrix(curr.conf.step)
accuracies <- append(accuracies, curr.cm.step$overall[1])
}
cutoff_acc_loop <- data.frame('cutoffs' = cutoffs, 'accuracies' = accuracies)
ggplot(cutoff_acc_loop, aes(x=cutoffs, y=accuracies)) + geom_line()
ggplot(cutoff_acc_loop, aes(x=cutoffs, y=accuracies)) +
geom_line(size=2, color='red')
ggplot(cutoff_acc_loop, aes(x=cutoffs, y=accuracies)) +
geom_line(size=2, color='indianred2')
ggplot(cutoff_acc_loop, aes(x=cutoffs, y=accuracies)) +
geom_line(size=2, color='indianred2') +
theme_minimal()
ggplot(cutoff_acc_loop, aes(x=cutoffs, y=accuracies)) +
geom_line(size=2, color='indianred2') +
labs(x='Classiciation Cutoff', y='Accuracy', title='Accuracy by Cutoff Value')
cutoffs <- seq(.1,.9,.01)
accuracies <- c()
for (i in cutoffs) {
curr.class.step <- factor(ifelse(fit.pred.step>i,">50K","<=50K"),levels=c("<=50K",">50K"))
curr.conf.step <- table(curr.class.step,df_test2$pay_response)
curr.cm.step <- confusionMatrix(curr.conf.step)
accuracies <- append(accuracies, 100*curr.cm.step$overall[1])
}
cutoff_acc_loop <- data.frame('cutoffs' = cutoffs, 'accuracies' = accuracies)
ggplot(cutoff_acc_loop, aes(x=cutoffs, y=accuracies)) +
geom_line(size=2, color='indianred2') +
labs(x='Classiciation Cutoff', y='Accuracy', title='Accuracy by Cutoff Value')
install.packages('gghighlight')
library(gghighlight)
ggplot(cutoff_acc_loop, aes(x=cutoffs, y=accuracies)) +
geom_line(size=2, color='indianred2') +
labs(x='Classiciation Cutoff', y='Accuracy', title='Accuracy by Cutoff Value') +
gghighlight(value = max(accuracies))
ggplot(cutoff_acc_loop, aes(x=cutoffs, y=accuracies)) +
geom_line(size=2, color='indianred2') +
labs(x='Classiciation Cutoff', y='Accuracy', title='Accuracy by Cutoff Value') +
gghighlight(value == max(accuracies))
maxacc <- max(cutoff_acc_loop$accuracies)
ggplot(cutoff_acc_loop, aes(x=cutoffs, y=accuracies)) +
geom_line(size=2, color='indianred2') +
labs(x='Classiciation Cutoff', y='Accuracy', title='Accuracy by Cutoff Value') +
gghighlight(value == maxacc)
ggplot(cutoff_acc_loop, aes(x=cutoffs, y=accuracies)) +
geom_line(size=2, color='indianred2') +
labs(x='Classiciation Cutoff', y='Accuracy', title='Accuracy by Cutoff Value') +
gghighlight(value = maxacc)
maxcut <- cutoff_acc_loop %>% filter(accuracies == maxacc) %>% pull(cutoffs)
ggplot(cutoff_acc_loop, aes(x=cutoffs, y=accuracies)) +
geom_line(size=2, color='indianred2') +
labs(x='Classiciation Cutoff', y='Accuracy', title='Accuracy by Cutoff Value') +
geom_point(aes(x=maxacc, y=maxcut))
ggplot(cutoff_acc_loop, aes(x=cutoffs, y=accuracies)) +
geom_line(size=2, color='indianred2') +
labs(x='Classiciation Cutoff', y='Accuracy', title='Accuracy by Cutoff Value') +
geom_point(aes(y=maxacc, x=maxcut))
ggplot(cutoff_acc_loop, aes(x=cutoffs, y=accuracies)) +
geom_line(size=2, color='indianred2') +
labs(x='Classiciation Cutoff', y='Accuracy', title='Accuracy by Cutoff Value') +
geom_point(aes(y=maxacc, x=maxcut), size=2)
ggplot(cutoff_acc_loop, aes(x=cutoffs, y=accuracies)) +
geom_line(size=2, color='indianred2') +
labs(x='Classiciation Cutoff', y='Accuracy', title='Accuracy by Cutoff Value') +
geom_point(aes(y=maxacc, x=maxcut), size=4)
ggplot(cutoff_acc_loop, aes(x=cutoffs, y=accuracies)) +
geom_line(size=2, color='indianred2') +
labs(x='Classiciation Cutoff', y='Accuracy', title='Accuracy by Cutoff Value') +
geom_point(aes(y=maxacc, x=maxcut), size=7, color='black')
ggplot(cutoff_acc_loop, aes(x=cutoffs, y=accuracies)) +
geom_line(size=2, color='indianred2') +
labs(x='Classiciation Cutoff', y='Accuracy', title='Accuracy by Cutoff Value') +
geom_point(aes(y=maxacc, x=maxcut), size=5, color='black', fill='indianred2')
ggplot(cutoff_acc_loop, aes(x=cutoffs, y=accuracies, label=accuracies)) +
geom_line(size=2, color='indianred2') +
labs(x='Classiciation Cutoff', y='Accuracy', title='Accuracy by Cutoff Value') +
geom_point(aes(y=maxacc, x=maxcut), size=5, color='black') +
geom_text(hjust=0, vjust=0)
ggplot(cutoff_acc_loop, aes(x=cutoffs, y=accuracies, label=accuracies)) +
geom_line(size=2, color='indianred2') +
labs(x='Classiciation Cutoff', y='Accuracy', title='Accuracy by Cutoff Value') +
geom_point(aes(y=maxacc, x=maxcut), size=5, color='black') +
geom_text(aes(label=ifelse(accuracies=maxacc,as.character(accuracies),''))hjust=0, vjust=0)
ggplot(cutoff_acc_loop, aes(x=cutoffs, y=accuracies, label=accuracies)) +
geom_line(size=2, color='indianred2') +
labs(x='Classiciation Cutoff', y='Accuracy', title='Accuracy by Cutoff Value') +
geom_point(aes(y=maxacc, x=maxcut), size=5, color='black') +
geom_text(aes(label=ifelse(accuracies=maxacc,as.character(accuracies),'')),hjust=0, vjust=0)
ggplot(cutoff_acc_loop, aes(x=cutoffs, y=accuracies, label=accuracies)) +
geom_line(size=2, color='indianred2') +
labs(x='Classiciation Cutoff', y='Accuracy', title='Accuracy by Cutoff Value') +
geom_point(aes(y=maxacc, x=maxcut), size=5, color='black') +
geom_text(aes(label=ifelse(accuracies=maxacc,accuracies,'')),hjust=0, vjust=0)
ggplot(cutoff_acc_loop, aes(x=cutoffs, y=accuracies, label=accuracies)) +
geom_line(size=2, color='indianred2') +
labs(x='Classiciation Cutoff', y='Accuracy', title='Accuracy by Cutoff Value') +
geom_point(aes(y=maxacc, x=maxcut), size=5, color='black') +
geom_text(aes(label=ifelse(accuracies==maxacc,accuracies,'')),hjust=0, vjust=0)
ggplot(cutoff_acc_loop, aes(x=cutoffs, y=accuracies, label=accuracies)) +
geom_line(size=2, color='indianred2') +
labs(x='Classiciation Cutoff', y='Accuracy', title='Accuracy by Cutoff Value') +
geom_point(aes(y=maxacc, x=maxcut), size=5, color='black') +
geom_text(aes(label=ifelse(accuracies==maxacc,round(accuracies,2),'')),hjust=0, vjust=0)
ggplot(cutoff_acc_loop, aes(x=cutoffs, y=accuracies, label=accuracies)) +
geom_line(size=2, color='indianred2') +
labs(x='Classiciation Cutoff', y='Accuracy', title='Accuracy by Cutoff Value') +
geom_point(aes(y=maxacc, x=maxcut), size=5, color='black') +
geom_text(aes(label=ifelse(accuracies==maxacc,round(accuracies,2),'')),hjust=1, vjust=0)
ggplot(cutoff_acc_loop, aes(x=cutoffs, y=accuracies, label=accuracies)) +
geom_line(size=2, color='indianred2') +
labs(x='Classiciation Cutoff', y='Accuracy', title='Accuracy by Cutoff Value') +
geom_point(aes(y=maxacc, x=maxcut), size=5, color='black') +
geom_text(aes(label=ifelse(accuracies==maxacc,round(accuracies,2),'')),hjust=-1, vjust=0)
ggplot(cutoff_acc_loop, aes(x=cutoffs, y=accuracies, label=accuracies)) +
geom_line(size=2, color='indianred2') +
labs(x='Classiciation Cutoff', y='Accuracy', title='Accuracy by Cutoff Value') +
geom_point(aes(y=maxacc, x=maxcut), size=5, color='black') +
geom_text(aes(label=ifelse(accuracies==maxacc,round(accuracies,2),'')),hjust=-.5, vjust=0)
ggplot(cutoff_acc_loop, aes(x=cutoffs, y=accuracies, label=accuracies)) +
geom_line(size=2, color='indianred2') +
labs(x='Classiciation Cutoff', y='Accuracy', title='Accuracy by Cutoff Value') +
geom_point(aes(y=maxacc, x=maxcut), size=5, color='black') +
geom_text(aes(label=ifelse(accuracies==maxacc,round(accuracies,2),'')),hjust=-.25, vjust=0)
ggplot(cutoff_acc_loop, aes(x=cutoffs, y=accuracies, label=accuracies)) +
geom_line(size=2, color='indianred2') +
labs(x='Classiciation Cutoff', y='Accuracy', title='Accuracy by Cutoff Value') +
geom_point(aes(y=maxacc, x=maxcut), size=5, color='black') +
geom_text(aes(label=ifelse(accuracies==maxacc,paste(round(accuracies,2),'%'),'')),hjust=-.25, vjust=0)
ggplot(cutoff_acc_loop, aes(x=cutoffs, y=accuracies, label=accuracies)) +
geom_line(size=2, color='indianred2') +
labs(x='Classiciation Cutoff', y='Accuracy', title='Accuracy by Cutoff Value') +
geom_point(aes(y=maxacc, x=maxcut), size=5, color='black') +
geom_text(aes(label=ifelse(accuracies==maxacc,paste(round(accuracies,2),'%',sep=''),'')),hjust=-.25, vjust=0)
ggplot(cutoff_acc_loop, aes(x=cutoffs, y=accuracies, label=accuracies)) +
geom_line(size=2, color='indianred2') +
labs(x='Classiciation Cutoff', y='Accuracy', title='Accuracy by Cutoff Value') +
geom_point(aes(y=maxacc, x=maxcut), size=5, color='black') +
geom_text(aes(label=ifelse(accuracies==maxacc,paste(round(accuracies,2),'%',sep=''),'')),hjust=-.2, vjust=0)
ggplot(cutoff_acc_loop, aes(x=cutoffs, y=accuracies, label=accuracies)) +
geom_line(size=2, color='indianred2') +
labs(x='Classiciation Cutoff', y='Accuracy', title='Accuracy by Cutoff Value') +
geom_point(aes(y=maxacc, x=maxcut), size=5, color='black') +
geom_text(aes(label=ifelse(accuracies == maxacc,paste(round(accuracies,2),'% - cutoff = ',maxcut,sep=''),'')),hjust=-.2, vjust=0)
ggplot(cutoff_acc_loop, aes(x=cutoffs, y=accuracies, label=accuracies)) +
geom_line(size=2, color='indianred2') +
labs(x='Classiciation Cutoff', y='Accuracy', title='Accuracy by Cutoff Value') +
geom_point(aes(y=maxacc, x=maxcut), size=5, color='black') +
geom_text(aes(label=ifelse(accuracies == maxacc,paste(round(accuracies,2),'%, cutoff = ',maxcut,sep=''),'')),hjust=-.2, vjust=0)
ggplot(cutoff_acc_loop, aes(x=cutoffs, y=accuracies, label=accuracies)) +
geom_line(size=2, color='indianred2') +
labs(x='Classiciation Cutoff', y='Accuracy', title='Accuracy by Cutoff Value') +
geom_point(aes(y=maxacc, x=maxcut), size=5, color='black') +
geom_text(
aes(label=ifelse(accuracies == maxacc,paste(round(accuracies,2),'%, cutoff = ',maxcut,sep=''),'')),hjust=-.2, vjust=0)
dat.train.x <- model.matrix(pay_response~.-1,df_train2)
dat.train.y<-df_train2[,13]
# Do cross-validation and plot
cvfit <- cv.glmnet(dat.train.x, dat.train.y, family = "binomial", type.measure = "class", nlambda = 1000)
plot(cvfit)
coef(cvfit, s = "lambda.min")
print("CV Error Rate:")
cvfit$cvm[which(cvfit$lambda==cvfit$lambda.min)]
#Optimal penalty
print("Penalty Value:")
cvfit$lambda.min
#For final model predictions go ahead and refit lasso using entire
#data set
finalmodel<-glmnet(dat.train.x, dat.train.y, family = "binomial",lambda=cvfit$lambda.min)
#Test set predictions & confusion matrix
dat.test.x<-model.matrix(pay_response~.-1,df_test2)
fit.pred.lasso <- predict(finalmodel, newx = dat.test.x, type = "response")
# Set cutoff and make classifications off of predictions
cutoff<-0.5
class.lasso<-factor(ifelse(fit.pred.lasso>cutoff,">50K","<=50K"),levels=c("<=50K",">50K"))
#Confusion Matrix for Lasso
conf.lasso<-table(class.lasso,df_test2$pay_response)
confusionMatrix(conf.lasso)
confusionMatrix(conf.lasso)
cutoffs <- seq(.1,.9,.01)
accuracies <- c()
for (i in cutoffs) {
curr.class.lasso <- factor(ifelse(fit.pred.lasso>i,">50K","<=50K"),levels=c("<=50K",">50K"))
curr.conf.lasso <- table(curr.class.lasso,df_test2$pay_response)
curr.cm.lasso <- confusionMatrix(curr.conf.lasso)
accuracies <- append(accuracies, 100*curr.cm.lasso$overall[1])
}
lasso.cutoff_acc_loop <- data.frame('cutoffs' = cutoffs, 'accuracies' = accuracies)
lasso.maxacc <- max(lasso.cutoff_acc_loop$accuracies)
lasso.maxcut <- lasso.cutoff_acc_loop %>% filter(accuracies == maxacc) %>% pull(cutoffs)
ggplot(lasso.cutoff_acc_loop, aes(x=cutoffs, y=accuracies, label=accuracies)) +
geom_line(size=2, color='indianred2') +
labs(x='Classiciation Cutoff', y='Accuracy', title='Accuracy by Cutoff Value - lassowise') +
geom_point(aes(y=lasso.maxacc, x=lasso.maxcut), size=5, color='black') +
geom_text(
aes(label=
ifelse(accuracies == lasso.maxacc,
paste(round(accuracies,2),'%, cutoff = ',lasso.maxcut,sep='')
,'')
),hjust=-.2, vjust=0
)
lasso.cutoff_acc_loop
ggplot(lasso.cutoff_acc_loop, aes(x=cutoffs, y=accuracies, label=accuracies)) +
geom_line(size=2, color='indianred2') +
labs(x='Classiciation Cutoff', y='Accuracy', title='Accuracy by Cutoff Value - Lasso') +
geom_point(aes(y=lasso.maxacc, x=lasso.maxcut), size=5, color='black')
ggplot(lasso.cutoff_acc_loop, aes(x=cutoffs, y=accuracies, label=accuracies)) +
geom_line(size=2, color='indianred2') +
labs(x='Classiciation Cutoff', y='Accuracy', title='Accuracy by Cutoff Value - Lasso')
ggplot(lasso.cutoff_acc_loop, aes(x=cutoffs, y=accuracies, label=accuracies)) +
geom_line(size=2, color='indianred2') +
labs(x='Classiciation Cutoff', y='Accuracy', title='Accuracy by Cutoff Value - Lasso') +
geom_point(aes(y=lasso.maxacc, x=lasso.maxcut), size=5, color='black')
lasso.maxacc <- max(lasso.cutoff_acc_loop$accuracies)
lasso.maxcut <- lasso.cutoff_acc_loop %>% filter(accuracies == lasso.maxacc) %>% pull(cutoffs)
ggplot(lasso.cutoff_acc_loop, aes(x=cutoffs, y=accuracies, label=accuracies)) +
geom_line(size=2, color='indianred2') +
labs(x='Classiciation Cutoff', y='Accuracy', title='Accuracy by Cutoff Value - Lasso') +
geom_point(aes(y=lasso.maxacc, x=lasso.maxcut), size=5, color='black') +
geom_text(
aes(label=
ifelse(accuracies == lasso.maxacc,
paste(round(accuracies,2),'%, cutoff = ',lasso.maxcut,sep='')
,'')
),hjust=-.2, vjust=0
)
# Create dataframe from vectors and establish max value for each column
step.cutoff_acc_loop <- data.frame('cutoffs' = cutoffs, 'accuracies' = accuracies)
step.maxacc <- max(step.cutoff_acc_loop$accuracies)
step.maxcut <- step.cutoff_acc_loop %>% filter(accuracies == step.maxacc) %>% pull(cutoffs)
# Create accuracy geom_line chart and mark maximum accuracy
ggplot(step.cutoff_acc_loop, aes(x=cutoffs, y=accuracies, label=accuracies)) +
geom_line(size=2, color='indianred2') +
labs(x='Classiciation Cutoff', y='Accuracy', title='Accuracy by Cutoff Value - Stepwise') +
geom_point(aes(y=step.maxacc, x=step.maxcut), size=5, color='black') +
geom_text(
aes(label=
ifelse(accuracies == step.maxacc,
paste(round(accuracies,2),'%, cutoff = ',step.maxcut,sep='')
,'')
),hjust=-.2, vjust=0
)
# Test different cutoffs - create vectors to store cutoffs and accuracies
step.cutoffs <- seq(.1,.9,.01)
step.accuracies <- c()
# Loop through cutoffs and find confusion matrix and accuracy of new classifications
for (i in step.cutoffs) {
curr.class.step <- factor(ifelse(fit.pred.step>i,">50K","<=50K"),levels=c("<=50K",">50K"))
curr.conf.step <- table(curr.class.step,df_test2$pay_response)
curr.cm.step <- confusionMatrix(curr.conf.step)
step.accuracies <- append(step.accuracies, 100*curr.cm.step$overall[1])
}
# Create dataframe from vectors and establish max value for each column
step.cutoff_acc_loop <- data.frame('cutoffs' = cutoffs, 'accuracies' = accuracies)
step.maxacc <- max(step.cutoff_acc_loop$accuracies)
step.maxcut <- step.cutoff_acc_loop %>% filter(accuracies == step.maxacc) %>% pull(cutoffs)
# Create accuracy geom_line chart and mark maximum accuracy
ggplot(step.cutoff_acc_loop, aes(x=cutoffs, y=accuracies, label=accuracies)) +
geom_line(size=2, color='indianred2') +
labs(x='Classiciation Cutoff', y='Accuracy', title='Accuracy by Cutoff Value - Stepwise') +
geom_point(aes(y=step.maxacc, x=step.maxcut), size=5, color='black') +
geom_text(
aes(label=
ifelse(accuracies == step.maxacc,
paste(round(accuracies,2),'%, cutoff = ',step.maxcut,sep='')
,'')
),hjust=-.2, vjust=0
)
step.cutoff_acc_loop <- data.frame('cutoffs' = step.cutoffs, 'accuracies' = step.accuracies)
step.maxacc <- max(step.cutoff_acc_loop$accuracies)
step.maxcut <- step.cutoff_acc_loop %>% filter(accuracies == step.maxacc) %>% pull(cutoffs)
# Create accuracy geom_line chart and mark maximum accuracy
ggplot(step.cutoff_acc_loop, aes(x=cutoffs, y=accuracies, label=accuracies)) +
geom_line(size=2, color='indianred2') +
labs(x='Classiciation Cutoff', y='Accuracy', title='Accuracy by Cutoff Value - Stepwise') +
geom_point(aes(y=step.maxacc, x=step.maxcut), size=5, color='black') +
geom_text(
aes(label=
ifelse(accuracies == step.maxacc,
paste(round(accuracies,2),'%, cutoff = ',step.maxcut,sep='')
,'')
),hjust=-.2, vjust=0
)
# Prepare LASSO ROC Curve
results.lasso<-prediction(fit.pred.lasso, df_test2$pay_response,label.ordering=c("<=50K",">50K"))
roc.lasso = performance(results.lasso, measure = "tpr", x.measure = "fpr")
# Prepare Step ROC Curve
results.step<-prediction(fit.pred.step, df_test2$pay_response,label.ordering=c("<=50K",">50K"))
roc.step = performance(results.step, measure = "tpr", x.measure = "fpr")
plot(roc.lasso)
plot(roc.step,col="orange", add = TRUE)
legend("bottomright",legend=c("Lasso","Stepwise"),col=c("blue", "orange"),lty=1,lwd=1)
abline(a=0, b= 1)
plot(roc.lasso, colorize=TRUE)
plot(roc.lasso, size=2)
plot(roc.lasso, size=4)
# Prepare LASSO ROC Curve
results.lasso<-prediction(fit.pred.lasso, df_test2$pay_response,label.ordering=c("<=50K",">50K"))
roc.lasso = performance(results.lasso, measure = "tpr", x.measure = "fpr")
# Prepare Step ROC Curve
results.step<-prediction(fit.pred.step, df_test2$pay_response,label.ordering=c("<=50K",">50K"))
roc.step = performance(results.step, measure = "tpr", x.measure = "fpr")
plot(roc.lasso, width=4)
plot(roc.step,col="orange", add = TRUE)
legend("bottomright",legend=c("Lasso","Stepwise"),col=c("blue", "orange"),lty=1,lwd=1)
abline(a=0, b= 1)
